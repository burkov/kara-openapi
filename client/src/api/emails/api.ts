/* tslint:disable */
/* eslint-disable */
/**
 * EmailsController OpenApi specification
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateEmailDto
 */
export interface CreateEmailDto {
    /**
     * 
     * @type {string}
     * @memberof CreateEmailDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface EmailDto
 */
export interface EmailDto {
    /**
     * 
     * @type {number}
     * @memberof EmailDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof EmailDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface UpdateEmailDto
 */
export interface UpdateEmailDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateEmailDto
     */
    'email'?: string;
}

/**
 * EmailsControllerApi - axios parameter creator
 * @export
 */
export const EmailsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateEmailDto} createEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmail: async (createEmailDto: CreateEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmailDto' is not null or undefined
            assertParamExists('createEmail', 'createEmailDto', createEmailDto)
            const localVarPath = `/api/emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmail: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEmail', 'id', id)
            const localVarPath = `/api/emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} offset 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmails: async (offset: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('listEmails', 'offset', offset)
            const localVarPath = `/api/emails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateEmailDto} updateEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail: async (id: number, updateEmailDto: UpdateEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmail', 'id', id)
            // verify required parameter 'updateEmailDto' is not null or undefined
            assertParamExists('updateEmail', 'updateEmailDto', updateEmailDto)
            const localVarPath = `/api/emails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailsControllerApi - functional programming interface
 * @export
 */
export const EmailsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmailsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateEmailDto} createEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmail(createEmailDto: CreateEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmail(createEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmail(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmail(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} offset 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmails(offset: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmailDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmails(offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateEmailDto} updateEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmail(id: number, updateEmailDto: UpdateEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmail(id, updateEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmailsControllerApi - factory interface
 * @export
 */
export const EmailsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmailsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateEmailDto} createEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmail(createEmailDto: CreateEmailDto, options?: any): AxiosPromise<EmailDto> {
            return localVarFp.createEmail(createEmailDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmail(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteEmail(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} offset 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmails(offset: number, limit?: number, options?: any): AxiosPromise<Array<EmailDto>> {
            return localVarFp.listEmails(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateEmailDto} updateEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmail(id: number, updateEmailDto: UpdateEmailDto, options?: any): AxiosPromise<EmailDto> {
            return localVarFp.updateEmail(id, updateEmailDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailsControllerApi - object-oriented interface
 * @export
 * @class EmailsControllerApi
 * @extends {BaseAPI}
 */
export class EmailsControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateEmailDto} createEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsControllerApi
     */
    public createEmail(createEmailDto: CreateEmailDto, options?: AxiosRequestConfig) {
        return EmailsControllerApiFp(this.configuration).createEmail(createEmailDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsControllerApi
     */
    public deleteEmail(id: number, options?: AxiosRequestConfig) {
        return EmailsControllerApiFp(this.configuration).deleteEmail(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} offset 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsControllerApi
     */
    public listEmails(offset: number, limit?: number, options?: AxiosRequestConfig) {
        return EmailsControllerApiFp(this.configuration).listEmails(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateEmailDto} updateEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailsControllerApi
     */
    public updateEmail(id: number, updateEmailDto: UpdateEmailDto, options?: AxiosRequestConfig) {
        return EmailsControllerApiFp(this.configuration).updateEmail(id, updateEmailDto, options).then((request) => request(this.axios, this.basePath));
    }
}


